<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop.xsd">
         
         
     <!-- 打开Spring的Annotation支持 -->
    <context:annotation-config/>
    <context:component-scan base-package="org.mfm.*"/>

	<!-- 整合Spring第一步创建JavaMailSenderImpl对象 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	 	<property name="host" value="smtp.sina.com"></property>  
	  	<property name="protocol" value="smtp"></property>  
		<property name="password" value="mfm9517530"></property>  
		<property name="username" value="m148632015"></property>  
	  <property name="javaMailProperties">
	  	<props>
	  		<prop key="mail.smtp.auth">true</prop>
	  	</props>
	  </property>
	</bean>
	<!-- 正常的情况如果要发送邮件，需要异步发送，否则会把大量的时间浪费发送邮件上面
	此时可能会造成用户重复刷新，使用Spring的ThreadPoolTaskExecutor可以方便实现多线程的程序 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	  <property name="corePoolSize" value="5" />
	  <property name="maxPoolSize" value="10" />
	  <property name="queueCapacity" value="25" />
	</bean>
		
     <bean id="ftlPath" class="java.lang.String">
     	<constructor-arg value="/ftl"/>
     </bean>
         
     <bean id="outPath" class="java.lang.String">
     	<constructor-arg value="/html"/>
     </bean>
     
    <!-- 整合Spring_Hibernate  主要配置2点-->
    <!-- 1、sessionFactory配置 -->
	<!-- 1.1配置数据库连接池 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
				<property name="url" value="${jdbc.url}"></property>
				<property name="driverClassName" value="${jdbc.driverClassName}"></property>
				<property name="username" value="${jdbc.username}"></property>
				<property name="password" value="${jdbc.password}"></property>
			</bean>
		</property>
		
		<!-- 1.2将hibernate配置信息引入 ，注解驱动Hibernate-->
		<property name="packagesToScan">
			<value>org.mfm.travel.model</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<!-- 2、事务管理配置 -->
	<!-- 2.1创建事务管理器 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:advice  id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 2.2配置AOP -->
	 <aop:config>
		<aop:pointcut id="allMethods" expression="execution(* org.mfm.travel.service.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
	</aop:config>
     
     <!-- Freemarker AOP检测配置示例 -->
<!-- 	<aop:config>
		<aop:aspect ref="indexService">
			<aop:pointcut id="generateTopPoint" expression="execution(* org.mfm.service.ChannelService.add*(..))||execution(* org.mfm.service.ChannelService.delete*(..))||execution(* org.mfm.service.ChannelService.update*(..))"/>
			<aop:after method="generateTop" pointcut="generateTopPoint"/>
		</aop:aspect>
	</aop:config>      -->
</beans>